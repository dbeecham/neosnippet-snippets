# Templates {{{
snippet stdc
options head
	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>
	#include <sys/signalfd.h>
	#include <signal.h>
	#include <pthread.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>

	#include "`ProjectName()`.h"

	${0}
snippet stdh
options head
	#pragma once

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>
	#include <sys/signalfd.h>
	#include <signal.h>
	#include <pthread.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>
# }}}

# Control structures {{{
snippet     if
options     head
abbr        if () {}
    if (${1:-1 == ret}) {
        ${0:TARGET}
    }

snippet     iff
options     head
abbr        if () 
    if (${1:-1 == ret})
        ${0:TARGET}

# No head option in else/elseif so it can be expanded after "}"
snippet     else
abbr        else {}
    else {
        ${0:TARGET}
    }

snippet     elif
abbr        else () {}
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     for
options     head
abbr        for () {}
    for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; $2++) {
        ${0:#:TARGET}
    }

# Counter based for's (don't ask for the type or count start)
snippet     fori
options     head
abbr        for (int x;...; x++) {}
    for (int ${1:i} = 0; $1 < ${2}; $1++) {
        ${0:#:TARGET}
    }

# For reverse counter
snippet     forri
options     head
abbr        for (int x; ...; x--) {}
    for (int ${1:i} = ${2}; $1 >= 0; $1--) {
        ${0:#:TARGET}
    }

snippet     while
options     head
abbr        while () {}
    while (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     switch
options     head
abbr        switch () {}
	switch (${1:#:var}) {
		case ${2:#:val}:
			${0:TARGET}
			break;
	}

snippet     case
options     head
abbr        case: break;
	case ${1}:
		${0}
		break;

# }}}

# Definition bodies {{{
snippet f
	${1:int} ${2:`ProjectName()`}${3:} (
		${4:struct `ProjectName()`_s * `ProjectName()`}${5:#:,args...}
	)
	{

		int ret = 0;

		${0}

		return 0;
	}
snippet F
    ${1:ret} = ${2:`ProjectName()`}${3:_init}(${4:`ProjectName()`}${5:#:,args...});
    ${0}
snippet struct
options head
abbr struct {}
	struct ${1:#:name} {
	    uint8_t sentinel;
	    ${0:TARGET:data}
	};

snippet     enum
options     head
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main
options head
	int main (
	    int argc,
	    char const* argv[]
	)
	{
	    ${0:TARGET}
	    return 0;
	}
# }}}

# Preprocessing directives {{{
# #include <...>
snippet     inc
options     head
alias       #inc, #include
    #include <${1:stdio.h}${0}

# #include "..."
snippet     Inc
options     head
alias       #Inc
    #include "${1}.h"${0}

snippet     ifdef
options     head
alias       #ifdef
abbr        #ifdef ... #endif
    #ifdef ${1:#:SYMBOL}
    ${0}
    #endif

snippet     ifndef
options     head
alias       #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

# This snippet used the placeholder instead of a trailing space
snippet     def
options     head
alias       #def, #define
    #define ${1}

# }}}

# Built-in function calls {{{
snippet printf
abbr    printf("...\n", ...);
    printf("${1}\n"${2});

snippet scanf
abbr    scanf("...", ...);
    scanf("${1}", ${2});

snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n"${3});

snippet fopen
abbr fopen("...", "...");
	fopen("${1:PATH}", "${2:MODE}");
	${0:TARGET}
	fclose(${3:FD});

snippet fgets
abbr    fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:stdin});

snippet fscanf
abbr    fscanf(file, "...", ...);
    fscanf(${1:stdin}, "${2}", ${3});

snippet fwrite
abbr    fwrite(......, file)
    fwrite(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet fread
abbr    fread(......, file)
    fread(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet memcpy
abbr    memcpy(dest, src, nbytes)
    memcpy(${1:DEST}, ${2:SRC}, ${3:NBYTES})

snippet malloc
abbr    malloc(size)
	($2 *)malloc(${1:N_MEMBERS} * sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet calloc
abbr    calloc(n, size)
	($2 *)calloc(${1:N_MEMBERS}, sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet realloc
abbr    realloc(old, size)
	($3 *)realloc(${1:OLD}, ${2:N_MEMBERS} * sizeof(${3:TYPE}));
	${0}

snippet seed_rand
    srand(time(NULL));
# }}}

# Built-in operators and alias {{{
snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet sizeof
alias   size
    sizeof(${0:TARGET})

snippet sizeof_array
alias   array_size
    (sizeof(${1:#:array}) / sizeof(*($1)))

snippet _Static_assert
alias   _static_assert
options head
    _Static_assert(${1:#:condition}, ${2:#:message});

snippet static_assert
options head
    static_assert(${1:#:condition}, ${2:#:message});

snippet _Generic
alias   generic, select
    _Generic(${1:#:expression}, ${2:#:association-list})

snippet va_list
options head
abbr    va_start(va_list, last_arg); ... ; va_end()
	va_list ${1:ap};
	va_start($1, ${2:LAST_ARG});
	${0}
	va_end($1);
# }}}

# syslog {{{
snippet openlog
options head
	openlog("${1:`ProjectName()`}", LOG_CONS | LOG_PID, LOG_USER);${0}
snippet syslog
options head
	// NOTE TO SELF: snippets available for syslog:
	//   * openlog - opens syslog
	//   * err     - syslog() error message
    //   * warn    - syslog() warning message
	//   * info    - syslog() info message
    //   * debug   - syslog() debug message
    //   * hi      - syslog() debug hi message
	// Remember to #include <syslog.h> (snip 'isyslog')
snippet err
options head
	syslog(LOG_ERR, "%s:%d:%s: ${1:msg}", __FILE__, __LINE__, __func__${2:#:, strerror(errno), ...});${0}
snippet warn
options head
	syslog(LOG_WARNING, "%s:%d:%s: ${1:func}: %s", __FILE__, __LINE__, __func__, strerror(errno));${0}
snippet info
options head
	syslog(LOG_INFO, "%s:%d:%s: ${1:#:msg}", __FILE__, __LINE__, __func__${2:#:, args...});${0}
snippet debug
options head
    syslog(LOG_DEBUG, "%s:%d:%s: ${1:#:msg}", __FILE__, __LINE__, __func__${2:#:, args..});${0}
snippet hi
options head
    syslog(LOG_DEBUG, "%s:%d:%s: hi!", __FILE__, __LINE__, __func__);
# }}}

# basic fd stuff {{{
snippet read
    bytes_read = read(${1:fd}, ${2:buf}, ${3:buf_len});
    if (-1 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
    }
    if (0 == bytes_read) {
        ${4}
    }
    ${0}
# }}}

# socket {{{
snippet socket
options head
	${1:`ProjectName()`->sock_fd} = socket(${2:servinfo_p}->ai_family, $2->ai_socktype, $2->ai_protocol);
	if (-1 == $1) {
		syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet getaddrinfo_a
options head
	a
	${0}
snippet tcpconnect
options head
	struct addrinfo *servinfo, *servinfo_p;
	ret = getaddrinfo(
		/* host = */ "${1:127.0.0.1}",
		/* port = */ "${2:4222}",
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_STREAM,
			.ai_flags = AI_PASSIVE
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}

	// Loop over the results from getaddrinfo and try to connect
	for (servinfo_p = servinfo; servinfo_p != NULL; servinfo_p = servinfo_p->ai_next) {
		${3:`ProjectName()`->sock_fd} = socket(servinfo_p->ai_family, servinfo_p->ai_socktype, servinfo_p->ai_protocol);
		if (-1 == $3) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
			continue;
		}

        ret = fcntl($3, F_SETFL, O_NONBLOCK);
        if (-1 == ret) {
            syslog(LOG_ERR, "%s:%d:%s: fcntl: %s", __FILE__, __LINE__, __func__, strerror(errno));
            return -1;
        }

		ret = connect($3, servinfo_p->ai_addr, servinfo_p->ai_addrlen);
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: connect: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($3);
			continue;
		}

		break;
	}
	if (NULL == servinfo_p) {
		syslog(LOG_ERR, "%s:%d:%s: failed to connect", __FILE__, __LINE__, __func__);
		return -1;
	}
	freeaddrinfo(servinfo);
	${0}
snippet connect
options head
	ret = connect(${1:`ProjectName()`->fd}, servinfo_p->ai_addr, servinfo_p->ai_addrlen);
	if (-1 == ret) {
		syslog(LOG_WARNING, "%s:%d:%s: connect: %s", __FILE__, __LINE__, __func__, strerror(errno));
		close($1);
		return -1;
	}
	${0}
# }}}

# ipcs {{{
snippet pipe
options head
	// $1[0] contains the read-end of the pipe, $1[1] contains the write-end.
	ret = pipe2(${1:`ProjectName()`->pipe_fd}, O_CLOEXEC | O_NONBLOCK);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: pipe2: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet socketpair
options head
	ret = socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, ${1:`ProjectName()`->sp_fd});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: socketpair: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

# }}}

# epoll {{{
snippet epoll
options head
	// NOTE TO SELF: snippets available for epoll:
	//   * epc - create epoll
	//   * epa - add fd to epoll
	//   * epd - delete fd from epoll
	//   * epm - modify (re-arm) fd in epoll
	//   * epw - main epoll_wait loop
	// To use epoll, remember to #include <sys/epoll.h> (snip 'iepoll')
    ${0}
snippet epc
	// Create the epoll instance
	${1:`ProjectName()`->epoll_fd} = epoll_create1(EPOLL_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_create1: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
    ${0}
snippet epa
	ret = epoll_ctl(
		${1:`vim_snippets#Filename('$1')`->epoll_fd},
		EPOLL_CTL_ADD,
	    ${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLONESHOT,
			.data = {
				.fd = $2
			}
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet epd
	// Remember to EPOLL_CTL_DEL *before* closing the file descriptor, see
	// https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_DEL,
	    ${2:fd},
		NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
    ${0}
snippet epm
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_MOD,
	    ${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLONESHOT,
			.data = event->data
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}${0}
snippet epw
	int ep_events_len = 0;
	struct epoll_event ep_events[EPOLL_NUM_EVENTS];
	for (ep_events_len = epoll_wait(${1:`vim_snippets#Filename('$1')`->epoll_fd}, ep_events, EPOLL_NUM_EVENTS, -1);
	     ep_events_len > 0;
	     ep_events_len = epoll_wait($1, ep_events, EPOLL_NUM_EVENTS, -1))
	{
		// (snippet: epev)
		ret = ${2:`vim_snippets#Filename('$1')`}_epoll_handle_events(${2:`vim_snippets#Filename('$1')`}, ep_events, ep_events_len);
		if (-1 == ret) {
			break;
		}
	}
	if (-1 == ep_events_len) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_wait: %s", __FILE__, __LINE__, __func__, strerror(errno));
		exit(EXIT_FAILURE);
	}
	${0}
snippet epev
	static int `ProjectName()`_epoll_handle_events (
	    struct `ProjectName()`_s * `ProjectName()`,
		struct epoll_event epoll_events[EPOLL_NUM_EVENTS],
		int ep_events_len
	)
	{
		int ret = 0;
		for (int i = 0; i < ep_events_len; i++) {
			// (snippet: epdisp)
			ret = `ProjectName()`_epoll_event_dispatch(`ProjectName()`, &epoll_events[i]);
			if (0 != ret) {
				return ret;
			}
		}
		return 0;
	}
	${0}
snippet epdisp
	static int `ProjectName()`_epoll_event_dispatch (
		struct `ProjectName()`_s * `ProjectName()`,
		struct epoll_event * event
	)
	{
		if (event->data.fd == `ProjectName()`->fd)
			return `ProjectName()`_epoll_event_fd(`ProjectName()`, event);

		syslog(LOG_WARNING, "%s:%d:%s: No match on epoll event.", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
# }}}

# linux file io {{{
snippet open
options head
	// open(2) flags:
	//   O_RDONLY   - read only
	//   O_WRONLY   - write only
	//   O_RDWR     - read/write
	//   O_CREAT    - create if does not exist (see open(2))
	//   O_EXCL     - use with O_CREAT to guarantee creation of file
	//   O_SYNC     - write(2) will sync to hardware before returning
	//   O_DIRECT   - try to not cache reads and writes (probably use O_SYNC instead)
	//   O_APPEND   - atomically append to file (seeking -> writing is not atomic)
	//   O_ASYNC    - use signal-driven I/O; default is SIGIO (warning!)
	//   O_CLOEXEC  - closes the file on exec() - just do it.
	//                this interacts badly with threads, signal will be sent to
	//                random thread in the program. If signal-driven I/O is
	//                wanted, then change the signal to some real-time signal,
	//                and implement synchronous signal handing using
	//                sigwaitinfo(2).
	//   O_NONBLOCK - open in non-blocking mode - is generally a good idea to prevent deadlock
	//   O_TMPFLIE  - create temporary file; filename specifies directory.
	${1:`ProjectName()`->fd} = open(
		/* path  = */ ${2:"/dev/urandom"},
		/* flags = */ ${3:O_RDONLY} | O_CLOEXEC | O_NONBLOCK
	);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: open: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
# }}}

# tcp server {{{
snippet server
options head
	// tcp or udp
	${0}
snippet tcp
options head
	// NOTE TO SELF:
	// remember to include netinet/in.h, arpa/inet.h, netdb.h, sys/socket.h
	struct addrinfo *servinfo, *p;
	ret = getaddrinfo(
		/* host = */ HOST,
		/* port = */ PORT, 
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_STREAM
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}

	// Loop over the results from getaddrinfo and try to bind them up.
	for (p = servinfo; p != NULL; p = p->ai_next) {

		// Create a socket
		${1:`ProjectName()`->tcp_fd} = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (-1 == $1) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// let's try the next entry...
			continue;
		}

		// Set the socket REUSEADDR - this makes sure that we can start the
		// application after a restart even if the socket is still registered
		// in the kernel by the old application due to stale connections from
		// clients.
		ret = setsockopt($1, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int));
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// We don't care if this doesn't work so much - we can run without REUSEADDR.
		}

		// Bind the socket to the port
		ret = bind($1, p->ai_addr, p->ai_addrlen);
		if (-1 == ret) {
			// Ok, we couldn't bind this socket - close this socket and try the
			// next hit from getaddrinfo.
			syslog(LOG_WARNING, "%s:%d:%s: bind: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($1);
			continue;
		}

		// If we get here, it means that we've successfully bound up a tcp
		// socket. We don't need to try any more results from getaddrinfo.
		// Break out of the loop.
		break;
	}
	// Remember to free up the servinfo data!
	freeaddrinfo(servinfo);

	// If p is NULL, it means that the above loop went through all of the
	// results from getaddrinfo and never broke out of the loop - so we have no
	// valid socket.
	if (NULL == p) {
		syslog(LOG_ERR, "%s:%d:%s: failed to bind to any address", __FILE__, __LINE__, __func__);
		return -1;
	}

	// At this point, we have successfully bound up a port. Now we just need to
	// listen for connection on the port.
	ret = listen($1, TCP_LISTEN_BACKLOG);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: listen: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet udp
options head
	// NOTE TO SELF:
	// remember to include netinet/in.h, arpa/inet.h, netdb.h, sys/socket.h
	struct addrinfo *servinfo, *p;
	ret = getaddrinfo(
		/* host = */ HOST,
		/* port = */ PORT, 
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_DGRAM
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}

	// Loop over the results from getaddrinfo and try to bind them up.
	for (p = servinfo; p != NULL; p = p->ai_next) {

		// Create a socket
		${1:`ProjectName()`->udp_fd} = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (-1 == $1) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// let's try the next entry...
			continue;
		}

		// Set the socket REUSEADDR - this makes sure that we can start the
		// application after a restart even if the socket is still registered
		// in the kernel by the old application due to stale connections from
		// clients.
		ret = setsockopt($1, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int));
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// We don't care if this doesn't work so much - we can run without REUSEADDR.
		}

		// Bind the socket to the port
		ret = bind($1, p->ai_addr, p->ai_addrlen);
		if (-1 == ret) {
			// Ok, we couldn't bind this socket - close this socket and try the
			// next hit from getaddrinfo.
			syslog(LOG_WARNING, "%s:%d:%s: bind: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($1);
			continue;
		}

		// If we get here, it means that we've successfully bound up a tcp
		// socket. We don't need to try any more results from getaddrinfo.
		// Break out of the loop.
		break;
	}
	// Remember to free up the servinfo data!
	freeaddrinfo(servinfo);

	// If p is NULL, it means that the above loop went through all of the
	// results from getaddrinfo and never broke out of the loop - so we have no
	// valid socket.
	if (NULL == p) {
		syslog(LOG_ERR, "%s:%d:%s: failed to bind to any address", __FILE__, __LINE__, __func__);
		return -1;
	}

	// Time to add udp_fd to epoll!

	${0}
# }}}

# signal {{{
snippet signal
options head
	// NOTE TO SELF: snippets available for signal
	//  * sigblock - block signal
	//  * sigw
	//  * sigemptyset
	//  * sigaddset
	//  * sigprocmask
	//  * signalfd
	//  * readsignalfd
	//  * signalfdread
	//  * sigqueue - send signal
	${0}
snippet sigqueue
options head
	ret = sigqueue(
		/* pid = */ ${1:getpid()},
		/* sig = */ ${2:SIGRTMIN},
		/* sigval = */ (union sigval) {
			.sival_int = 1
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigqueue: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
snippet sigemptyset
options head
	ret = sigemptyset(${1:&`ProjectName()`->sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigemptyset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigaddset
options head
	ret = sigaddset(${1:&`ProjectName()`->sigset}, ${2:SIGPIPE});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigprocmask
options head
	ret = sigprocmask(
		/* how = */ SIG_BLOCK,
		/* set = */ ${1:&`ProjectName()`->sigset}, 
		/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigprocmask: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigblock
options head
	ret = sigemptyset(${1:&`ProjectName()`->sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigemptyset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGPIPE);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGINT);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigprocmask(
		/* how = */ SIG_BLOCK,
		/* set = */ $1, 
		/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigprocmask: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	${0}
snippet signalfd
options head
	${1:`ProjectName()`->signal_fd} = signalfd(
		/* fd = */ -1,
		/* &sigset = */ ${2:&`ProjectName()`->sigset},
		/* flags = */ SFD_CLOEXEC | SFD_NONBLOCK
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: signalfd: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet signalfdread
alias readsignalfd
options head
	struct signalfd_siginfo siginfo = {0};
	bytes_read = read(${1:`ProjectName()`->signal_fd}, ${2:&siginfo}, sizeof(struct signalfd_siginfo));
	if (-1 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	if (0 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: signal_fd closed!", __FILE__, __LINE__, __func__);
		return -1;
	}
	if (sizeof(struct signalfd_siginfo) != bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read unusal number of bytes from signalfd!", __FILE__, __LINE__, __func__);
		return -1;
	}
}
# }}}

# timerfd {{{
snippet timerfd
options head
	// NOTE TO SELF: snippets available for timerfd:
	//   * timerfdc - create a timerfd
	//   * timerfds - timerfd_settime
	// Remember to #include <sys/timerfd.h> (snip 'itimerfd')
	${0}
snippet timerfdc
options head
	// create timerfd
	${1:`ProjectName()`->nats_watchdog} = timerfd_create(CLOCK_MONOTONIC, TFD_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: timerfd_create: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet timerfds
options head
	// arm timerfd
	ret = timerfd_settime(
		/* fd        = */ ${1:`ProjectName()`->nats_watchdog},
		/* opt       = */ 0,
		/* timerspec = */ &(struct itimerspec) {
			.it_interval = {0},
			.it_value = {
				.tv_sec  = 10,
				.tv_nsec = 0
			}
		},
		/* old_ts    = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: timerfd_settime: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snipppet timerfdread
alias readtimerfd
options head
	uint64_t num_expirations;
	int bytes_read = read(timerfd, &num_expirations, sizeof(uint64_t));
# }}}

# vim: fdm=marker noexpandtab
